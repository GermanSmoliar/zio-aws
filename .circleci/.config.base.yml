version: 2.1

# Some reusable YAML definitions
save_cache: &save_cache
  - save_cache:
      key: sbt-cache-3
      paths:
        - "~/.ivy2/cache"
        - "~/.sbt"
        - "~/.m2"
        - "~/.cache"
        - "target"

load_cache: &load_cache
  - restore_cache:
      key: sbt-cache-3

scala_212: &scala_212
  SCALA_VERSION: 2.12.12

scala_213: &scala_213
  SCALA_VERSION: 2.13.3

jdk_8: &jdk_8
  JDK_VERSION: 8

jdk_11: &jdk_11
  JDK_VERSION: 11

machine_ubuntu: &machine_ubuntu
  machine:
    image: ubuntu-1604:201903-01

install_jdk: &install_jdk
  - run:
      name: Install JDK
      command: |
        while $(ps aux | grep -i ' apt ' | grep -v grep > /dev/null); do sleep 1; done # Wait for apt to be ready
        sudo rm /etc/apt/sources.list.d/*
        sudo tee /etc/apt/sources.list > /dev/null \<< 'EOF'
        deb http://mirror.math.princeton.edu/pub/ubuntu/ xenial main universe
        deb http://mirror.math.princeton.edu/pub/ubuntu/ xenial-updates main universe
        deb http://mirror.math.princeton.edu/pub/ubuntu/ xenial-backports main universe
        deb http://mirror.math.princeton.edu/pub/ubuntu/ xenial-security main restricted universe
        EOF
        if [ $JDK_VERSION == 11 ]; then
          wget -qO - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public | sudo apt-key add -
          sudo add-apt-repository https://adoptopenjdk.jfrog.io/adoptopenjdk/deb/ -y
        fi
        sudo apt update
        if [ $JDK_VERSION == 11 ]; then
          sudo apt install -y adoptopenjdk-11-hotspot
        elif [ $JDK_VERSION == 8 ]; then
          sudo apt install -y openjdk-8-jdk
        fi
        java -version

filter_tags: &filter_tags
  tags:
    only: /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/

java_opts: &java_opts
  JAVA_OPTS: -Dfile.encoding=UTF8 -Xss16M -XX:+UseParallelGC -XX:ReservedCodeCacheSize=512M
  SBT_OPTS: -J-Xmx4g -J-Xms4g

save_test_results: &save_test_results
  - run:
      command: |
        mkdir -p test-reports
        find . -type f -regex ".*/target/test-reports/.*xml" -exec cp {} test-reports/ \;
      name: Save test results

configure_gpg: &configure_gpg
  - run:
      command: |
        mkdir -p $HOME/bin
        sudo apt-get update && sudo apt-get -y install gnupg2
        echo pinentry-mode loopback >> ~/.gnupg/gpg.conf
        echo allow-loopback-pinentry >> ~/.gnupg/gpg-agent.conf
        chmod 600 ~/.gnupg/*
        ln -s /usr/bin/gpg2 $HOME/bin/gpg
        $HOME/bin/gpg --version
        echo RELOADAGENT | gpg-connect-agent
        echo -n "${PGP_SECRET}" | base64 -d | gpg2 --import --no-tty --batch --passphrase "$PGP_PASSPHRASE" --pinentry-mode loopback

localstack: &localstack
  - image: localstack/localstack
    environment:
      LOCALSTACK_HOST: localstack
      SERVICES: 's3,dynamodb'
      USE_SSL: "false"
      DEFAULT_REGION: 'us-east-1'
      AWS_DEFAULT_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: dummy-key
      AWS_SECRET_ACCESS_KEY: dummy-key
      DEBUG: "1"

# CircleCI jobs

jobs:
  tests_core_213:
    <<: *machine_ubuntu
    environment:
      - <<: *scala_213
      - <<: *java_opts
      - <<: *jdk_11
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - <<: *load_cache
      - <<: *install_jdk
      - run: ./sbt ++$SCALA_VERSION zio-aws-core/test zio-aws-akka-http/test zio-aws-http4s/test zio-aws-netty/test
      - <<: *save_cache
      - <<: *save_test_results
      - store_test_results:
          path: test-reports
      - persist_to_workspace:
          root: .
          paths:
            - project/target/scala-2.13
            - target/scala-2.13
            - zio-aws-*/target/scala-2.13
            - generated

  tests_core_212:
    <<: *machine_ubuntu
    environment:
      - <<: *scala_212
      - <<: *java_opts
      - <<: *jdk_11
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - <<: *load_cache
      - <<: *install_jdk
      - run: ./sbt ++$SCALA_VERSION zio-aws-core/test zio-aws-akka-http/test zio-aws-http4s/test zio-aws-netty/test
      - <<: *save_cache
      - <<: *save_test_results
      - store_test_results:
          path: test-reports
      - persist_to_workspace:
          root: .
          paths:
            - project/target/scala-2.12
            - target/scala-2.12
            - zio-aws-*/target/scala-2.12
            - generated

  integration_tests_213:
    docker:
      - image: hseeberger/scala-sbt:8u265_1.4.1_2.13.3
      - <<: *localstack
    environment:
      - <<: *scala_213
    steps:
      - checkout
      - <<: *load_cache
      - run: sbt -J-Xmx2350m -J-Xms2350m ++$SCALA_VERSION examples/compile integtests/test
      - <<: *save_test_results
      - store_test_results:
          path: test-reports

  integration_tests_212:
    docker:
      - image: hseeberger/scala-sbt:8u265_1.4.1_2.12.12
      - <<: *localstack
    environment:
      - <<: *scala_212
    steps:
      - checkout
      # Cannot load cache as we create it for the machine executor
      - run: sbt -J-Xmx2350m -J-Xms2350m ++$SCALA_VERSION examples/compile integtests/test
      - <<: *save_test_results
      - store_test_results:
          path: test-reports

  tag:
    <<: *machine_ubuntu
    environment:
      - <<: *jdk_11
      - <<: *java_opts
      - <<: *scala_213
    steps:
      - add_ssh_keys:
          fingerprints:
            - $SSH_FINGERPRINT
      - checkout
      - <<: *load_cache
      - <<: *install_jdk
      - run: ./sbt tagAwsVersion ciReleaseTagNextVersion

  compile_sdk_projects:
    parameters:
      commands:
        description: SBT commands to run
        type: string
      scala_version:
        description: Scala version
        type: string
    <<: *machine_ubuntu
    environment:
      - SCALA_VERSION: << parameters.scala_version >>
      - <<: *jdk_11
      - <<: *java_opts
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - <<: *load_cache
      - <<: *install_jdk
      - run: ./sbt ++$SCALA_VERSION << parameters.commands >>
      # Does not persist to workspace here because of cross-building, both jobs would persist target/streams
      # So we have to rebuild for `publish_sdk_projects` upon release

  publish_sdk_projects:
    parameters:
      commands:
        description: SBT commands to run
        type: string
      scala_version:
        description: Scala version
        type: string
    <<: *machine_ubuntu
    environment:
      - SCALA_VERSION: << parameters.scala_version >>
      - <<: *jdk_11
      - <<: *java_opts
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - <<: *load_cache
      - <<: *install_jdk
      - <<: *configure_gpg
      - run: PATH=$HOME/bin:$PATH ./sbt ++$SCALA_VERSION << parameters.commands >>
      - persist_to_workspace:
          root: .
          paths:
            - target/sonatype-staging

  # Publish the non-generated modules and then upload them + the generated ones to Sonatype
  release:
    <<: *machine_ubuntu
    environment:
      - <<: *jdk_11
      - <<: *java_opts
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - <<: *load_cache
      - <<: *install_jdk
      - <<: *configure_gpg
      - run:
          name: Release artifacts
          command: PATH=$HOME/bin:$PATH ./sbt +publishSigned sonatypeBundleRelease

  microsite:
    docker:
      - image: vigoo/scala-sbt-jekyll:11.0.8_1.4.1_2.13.3
    environment:
      SBT_GHPAGES_COMMIT_MESSAGE: '[ci skip] updated site'
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - <<: *load_cache
      - <<: *configure_gpg
      - run:
          name: Generate microsite
          command: |
            git config --global user.email "daniel.vigovszky@gmail.com"
            git config --global user.name "Daniel Vigovszky"
            git config --global push.default simple
            sbt -J-Xmx2500m -J-Xms2500m generateArtifactList docs/publishMicrosite
workflows:
  version: 2
  build:
    jobs:
      # Scala 2.12
      - tests_core_212:
          filters:
            <<: *filter_tags
      - integration_tests_212:
          requires:
            - tests_core_212
          filters:
            <<: *filter_tags
      # Scala 2.13
      - tests_core_213:
          filters:
            <<: *filter_tags
      - integration_tests_213:
          requires:
            - tests_core_213
          filters:
            <<: *filter_tags

      # Create the next tag
      - tag:
          filters:
            <<: *filter_tags
            branches:
              only:
                - master

      # Cross build SDK projects
      - compile_sdk_projects:
          requires:
            - tests_core_213
            - tests_core_212
            - tag
          filters:
            <<: *filter_tags
            branches:
              ignore:
                - master
          matrix:
            parameters:
              scala_version:
                - 2.13.3
                - 2.12.12
                # NOTE this part is automatically generated
              commands: COMPILE_COMMANDS
      - publish_sdk_projects:
          requires:
            - tests_core_213
            - tests_core_212
            - tag
          filters:
            <<: *filter_tags
            branches:
              only:
                - master
          matrix:
            parameters:
              scala_version:
                - 2.13.3
                - 2.12.12
                # NOTE this part is automatically generated
              commands: PUBLISH_COMMANDS
      - release:
          requires:
            - publish_sdk_projects
          filters:
            <<: *filter_tags
            branches:
              only:
                - master

      - microsite:
          requires:
            - tag
            - tests_core_213
            - tests_core_212
            - tag
          filters:
            <<: *filter_tags
            branches:
              only:
                - master