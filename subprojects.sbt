
  import Common._
  import Core._
  lazy val core = Project("zio-aws-core", file("zio-aws-core")).settings(commonSettings).settings(coreSettings)
  lazy val apigateway = Project("zio-aws-apigateway", file("generated") / "apigateway").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "apigateway" % awsVersion, awsLibraryId := "apigateway", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val personalizeruntime = Project("zio-aws-personalizeruntime", file("generated") / "personalizeruntime").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "personalizeruntime" % awsVersion, awsLibraryId := "personalizeruntime", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val datasync = Project("zio-aws-datasync", file("generated") / "datasync").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "datasync" % awsVersion, awsLibraryId := "datasync", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val sts = Project("zio-aws-sts", file("generated") / "sts").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "sts" % awsVersion, awsLibraryId := "sts", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val kafka = Project("zio-aws-kafka", file("generated") / "kafka").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "kafka" % awsVersion, awsLibraryId := "kafka", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val cloudsearchdomain = Project("zio-aws-cloudsearchdomain", file("generated") / "cloudsearchdomain").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "cloudsearchdomain" % awsVersion, awsLibraryId := "cloudsearchdomain", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val clouddirectory = Project("zio-aws-clouddirectory", file("generated") / "clouddirectory").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "clouddirectory" % awsVersion, awsLibraryId := "clouddirectory", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val glacier = Project("zio-aws-glacier", file("generated") / "glacier").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "glacier" % awsVersion, awsLibraryId := "glacier", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val codestarnotifications = Project("zio-aws-codestarnotifications", file("generated") / "codestarnotifications").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "codestarnotifications" % awsVersion, awsLibraryId := "codestarnotifications", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val iot1clickdevices = Project("zio-aws-iot1clickdevices", file("generated") / "iot1clickdevices").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "iot1clickdevices" % awsVersion, awsLibraryId := "iot1clickdevices", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val workmailmessageflow = Project("zio-aws-workmailmessageflow", file("generated") / "workmailmessageflow").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "workmailmessageflow" % awsVersion, awsLibraryId := "workmailmessageflow", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val machinelearning = Project("zio-aws-machinelearning", file("generated") / "machinelearning").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "machinelearning" % awsVersion, awsLibraryId := "machinelearning", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val cloudwatchlogs = Project("zio-aws-cloudwatchlogs", file("generated") / "cloudwatchlogs").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "cloudwatchlogs" % awsVersion, awsLibraryId := "cloudwatchlogs", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val resourcegroups = Project("zio-aws-resourcegroups", file("generated") / "resourcegroups").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "resourcegroups" % awsVersion, awsLibraryId := "resourcegroups", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val snowball = Project("zio-aws-snowball", file("generated") / "snowball").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "snowball" % awsVersion, awsLibraryId := "snowball", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val forecastquery = Project("zio-aws-forecastquery", file("generated") / "forecastquery").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "forecastquery" % awsVersion, awsLibraryId := "forecastquery", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val kendra = Project("zio-aws-kendra", file("generated") / "kendra").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "kendra" % awsVersion, awsLibraryId := "kendra", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val sagemakera2iruntime = Project("zio-aws-sagemakera2iruntime", file("generated") / "sagemakera2iruntime").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "sagemakera2iruntime" % awsVersion, awsLibraryId := "sagemakera2iruntime", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val ec2 = Project("zio-aws-ec2", file("generated") / "ec2").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "ec2" % awsVersion, awsLibraryId := "ec2", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val wafregional = Project("zio-aws-wafregional", file("generated") / "wafregional").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "waf" % awsVersion, awsLibraryId := "waf:wafregional", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core, waf)
  lazy val elasticloadbalancing = Project("zio-aws-elasticloadbalancing", file("generated") / "elasticloadbalancing").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "elasticloadbalancing" % awsVersion, awsLibraryId := "elasticloadbalancing", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val accessanalyzer = Project("zio-aws-accessanalyzer", file("generated") / "accessanalyzer").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "accessanalyzer" % awsVersion, awsLibraryId := "accessanalyzer", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val ssooidc = Project("zio-aws-ssooidc", file("generated") / "ssooidc").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "ssooidc" % awsVersion, awsLibraryId := "ssooidc", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val directory = Project("zio-aws-directory", file("generated") / "directory").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "directory" % awsVersion, awsLibraryId := "directory", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val iotsecuretunneling = Project("zio-aws-iotsecuretunneling", file("generated") / "iotsecuretunneling").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "iotsecuretunneling" % awsVersion, awsLibraryId := "iotsecuretunneling", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val cloudwatch = Project("zio-aws-cloudwatch", file("generated") / "cloudwatch").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "cloudwatch" % awsVersion, awsLibraryId := "cloudwatch", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val transcribestreaming = Project("zio-aws-transcribestreaming", file("generated") / "transcribestreaming").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "transcribestreaming" % awsVersion, awsLibraryId := "transcribestreaming", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val elasticloadbalancingv2 = Project("zio-aws-elasticloadbalancingv2", file("generated") / "elasticloadbalancingv2").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "elasticloadbalancingv2" % awsVersion, awsLibraryId := "elasticloadbalancingv2", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val greengrass = Project("zio-aws-greengrass", file("generated") / "greengrass").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "greengrass" % awsVersion, awsLibraryId := "greengrass", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val licensemanager = Project("zio-aws-licensemanager", file("generated") / "licensemanager").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "licensemanager" % awsVersion, awsLibraryId := "licensemanager", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val cognitoidentity = Project("zio-aws-cognitoidentity", file("generated") / "cognitoidentity").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "cognitoidentity" % awsVersion, awsLibraryId := "cognitoidentity", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val autoscaling = Project("zio-aws-autoscaling", file("generated") / "autoscaling").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "autoscaling" % awsVersion, awsLibraryId := "autoscaling", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val polly = Project("zio-aws-polly", file("generated") / "polly").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "polly" % awsVersion, awsLibraryId := "polly", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val codeguruprofiler = Project("zio-aws-codeguruprofiler", file("generated") / "codeguruprofiler").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "codeguruprofiler" % awsVersion, awsLibraryId := "codeguruprofiler", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val codestar = Project("zio-aws-codestar", file("generated") / "codestar").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "codestar" % awsVersion, awsLibraryId := "codestar", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val qldb = Project("zio-aws-qldb", file("generated") / "qldb").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "qldb" % awsVersion, awsLibraryId := "qldb", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val iotthingsgraph = Project("zio-aws-iotthingsgraph", file("generated") / "iotthingsgraph").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "iotthingsgraph" % awsVersion, awsLibraryId := "iotthingsgraph", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val connectparticipant = Project("zio-aws-connectparticipant", file("generated") / "connectparticipant").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "connectparticipant" % awsVersion, awsLibraryId := "connectparticipant", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val sso = Project("zio-aws-sso", file("generated") / "sso").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "sso" % awsVersion, awsLibraryId := "sso", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val kinesisvideosignaling = Project("zio-aws-kinesisvideosignaling", file("generated") / "kinesisvideosignaling").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "kinesisvideosignaling" % awsVersion, awsLibraryId := "kinesisvideosignaling", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val codegurureviewer = Project("zio-aws-codegurureviewer", file("generated") / "codegurureviewer").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "codegurureviewer" % awsVersion, awsLibraryId := "codegurureviewer", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val mediaconvert = Project("zio-aws-mediaconvert", file("generated") / "mediaconvert").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "mediaconvert" % awsVersion, awsLibraryId := "mediaconvert", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val elasticbeanstalk = Project("zio-aws-elasticbeanstalk", file("generated") / "elasticbeanstalk").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "elasticbeanstalk" % awsVersion, awsLibraryId := "elasticbeanstalk", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val guardduty = Project("zio-aws-guardduty", file("generated") / "guardduty").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "guardduty" % awsVersion, awsLibraryId := "guardduty", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val workmail = Project("zio-aws-workmail", file("generated") / "workmail").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "workmail" % awsVersion, awsLibraryId := "workmail", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val ebs = Project("zio-aws-ebs", file("generated") / "ebs").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "ebs" % awsVersion, awsLibraryId := "ebs", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val apigatewayv2 = Project("zio-aws-apigatewayv2", file("generated") / "apigatewayv2").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "apigatewayv2" % awsVersion, awsLibraryId := "apigatewayv2", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val textract = Project("zio-aws-textract", file("generated") / "textract").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "textract" % awsVersion, awsLibraryId := "textract", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val backup = Project("zio-aws-backup", file("generated") / "backup").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "backup" % awsVersion, awsLibraryId := "backup", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val efs = Project("zio-aws-efs", file("generated") / "efs").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "efs" % awsVersion, awsLibraryId := "efs", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val workspaces = Project("zio-aws-workspaces", file("generated") / "workspaces").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "workspaces" % awsVersion, awsLibraryId := "workspaces", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val amplify = Project("zio-aws-amplify", file("generated") / "amplify").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "amplify" % awsVersion, awsLibraryId := "amplify", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val glue = Project("zio-aws-glue", file("generated") / "glue").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "glue" % awsVersion, awsLibraryId := "glue", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val costexplorer = Project("zio-aws-costexplorer", file("generated") / "costexplorer").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "costexplorer" % awsVersion, awsLibraryId := "costexplorer", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val mediatailor = Project("zio-aws-mediatailor", file("generated") / "mediatailor").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "mediatailor" % awsVersion, awsLibraryId := "mediatailor", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val appsync = Project("zio-aws-appsync", file("generated") / "appsync").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "appsync" % awsVersion, awsLibraryId := "appsync", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val mq = Project("zio-aws-mq", file("generated") / "mq").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "mq" % awsVersion, awsLibraryId := "mq", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val sqs = Project("zio-aws-sqs", file("generated") / "sqs").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "sqs" % awsVersion, awsLibraryId := "sqs", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val cloudwatchevents = Project("zio-aws-cloudwatchevents", file("generated") / "cloudwatchevents").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "cloudwatchevents" % awsVersion, awsLibraryId := "cloudwatchevents", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val s3 = Project("zio-aws-s3", file("generated") / "s3").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "s3" % awsVersion, awsLibraryId := "s3", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val lexmodelbuilding = Project("zio-aws-lexmodelbuilding", file("generated") / "lexmodelbuilding").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "lexmodelbuilding" % awsVersion, awsLibraryId := "lexmodelbuilding", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val acm = Project("zio-aws-acm", file("generated") / "acm").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "acm" % awsVersion, awsLibraryId := "acm", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val cloudfront = Project("zio-aws-cloudfront", file("generated") / "cloudfront").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "cloudfront" % awsVersion, awsLibraryId := "cloudfront", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val resourcegroupstaggingapi = Project("zio-aws-resourcegroupstaggingapi", file("generated") / "resourcegroupstaggingapi").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "resourcegroupstaggingapi" % awsVersion, awsLibraryId := "resourcegroupstaggingapi", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val quicksight = Project("zio-aws-quicksight", file("generated") / "quicksight").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "quicksight" % awsVersion, awsLibraryId := "quicksight", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val rdsdata = Project("zio-aws-rdsdata", file("generated") / "rdsdata").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "rdsdata" % awsVersion, awsLibraryId := "rdsdata", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val xray = Project("zio-aws-xray", file("generated") / "xray").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "xray" % awsVersion, awsLibraryId := "xray", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val codeartifact = Project("zio-aws-codeartifact", file("generated") / "codeartifact").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "codeartifact" % awsVersion, awsLibraryId := "codeartifact", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val cloudtrail = Project("zio-aws-cloudtrail", file("generated") / "cloudtrail").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "cloudtrail" % awsVersion, awsLibraryId := "cloudtrail", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val databasemigration = Project("zio-aws-databasemigration", file("generated") / "databasemigration").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "databasemigration" % awsVersion, awsLibraryId := "databasemigration", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val support = Project("zio-aws-support", file("generated") / "support").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "support" % awsVersion, awsLibraryId := "support", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val kinesisvideomedia = Project("zio-aws-kinesisvideomedia", file("generated") / "kinesisvideomedia").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "kinesisvideomedia" % awsVersion, awsLibraryId := "kinesisvideomedia", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val acmpca = Project("zio-aws-acmpca", file("generated") / "acmpca").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "acmpca" % awsVersion, awsLibraryId := "acmpca", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val ram = Project("zio-aws-ram", file("generated") / "ram").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "ram" % awsVersion, awsLibraryId := "ram", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val firehose = Project("zio-aws-firehose", file("generated") / "firehose").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "firehose" % awsVersion, awsLibraryId := "firehose", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val ioteventsdata = Project("zio-aws-ioteventsdata", file("generated") / "ioteventsdata").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "ioteventsdata" % awsVersion, awsLibraryId := "ioteventsdata", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val inspector = Project("zio-aws-inspector", file("generated") / "inspector").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "inspector" % awsVersion, awsLibraryId := "inspector", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val appstream = Project("zio-aws-appstream", file("generated") / "appstream").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "appstream" % awsVersion, awsLibraryId := "appstream", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val braket = Project("zio-aws-braket", file("generated") / "braket").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "braket" % awsVersion, awsLibraryId := "braket", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val servicecatalog = Project("zio-aws-servicecatalog", file("generated") / "servicecatalog").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "servicecatalog" % awsVersion, awsLibraryId := "servicecatalog", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val robomaker = Project("zio-aws-robomaker", file("generated") / "robomaker").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "robomaker" % awsVersion, awsLibraryId := "robomaker", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val autoscalingplans = Project("zio-aws-autoscalingplans", file("generated") / "autoscalingplans").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "autoscalingplans" % awsVersion, awsLibraryId := "autoscalingplans", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val route53 = Project("zio-aws-route53", file("generated") / "route53").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "route53" % awsVersion, awsLibraryId := "route53", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val signer = Project("zio-aws-signer", file("generated") / "signer").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "signer" % awsVersion, awsLibraryId := "signer", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val neptune = Project("zio-aws-neptune", file("generated") / "neptune").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "neptune" % awsVersion, awsLibraryId := "neptune", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val applicationinsights = Project("zio-aws-applicationinsights", file("generated") / "applicationinsights").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "applicationinsights" % awsVersion, awsLibraryId := "applicationinsights", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val rds = Project("zio-aws-rds", file("generated") / "rds").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "rds" % awsVersion, awsLibraryId := "rds", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val sns = Project("zio-aws-sns", file("generated") / "sns").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "sns" % awsVersion, awsLibraryId := "sns", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val athena = Project("zio-aws-athena", file("generated") / "athena").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "athena" % awsVersion, awsLibraryId := "athena", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val cloudhsm = Project("zio-aws-cloudhsm", file("generated") / "cloudhsm").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "cloudhsm" % awsVersion, awsLibraryId := "cloudhsm", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val lightsail = Project("zio-aws-lightsail", file("generated") / "lightsail").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "lightsail" % awsVersion, awsLibraryId := "lightsail", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val qldbsession = Project("zio-aws-qldbsession", file("generated") / "qldbsession").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "qldbsession" % awsVersion, awsLibraryId := "qldbsession", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val emr = Project("zio-aws-emr", file("generated") / "emr").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "emr" % awsVersion, awsLibraryId := "emr", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val translate = Project("zio-aws-translate", file("generated") / "translate").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "translate" % awsVersion, awsLibraryId := "translate", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val forecast = Project("zio-aws-forecast", file("generated") / "forecast").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "forecast" % awsVersion, awsLibraryId := "forecast", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val docdb = Project("zio-aws-docdb", file("generated") / "docdb").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "docdb" % awsVersion, awsLibraryId := "docdb", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val mturk = Project("zio-aws-mturk", file("generated") / "mturk").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "mturk" % awsVersion, awsLibraryId := "mturk", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val dataexchange = Project("zio-aws-dataexchange", file("generated") / "dataexchange").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "dataexchange" % awsVersion, awsLibraryId := "dataexchange", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val codedeploy = Project("zio-aws-codedeploy", file("generated") / "codedeploy").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "codedeploy" % awsVersion, awsLibraryId := "codedeploy", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val sagemaker = Project("zio-aws-sagemaker", file("generated") / "sagemaker").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "sagemaker" % awsVersion, awsLibraryId := "sagemaker", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val dynamodb = Project("zio-aws-dynamodb", file("generated") / "dynamodb").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "dynamodb" % awsVersion, awsLibraryId := "dynamodb:dynamodb", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val lexruntime = Project("zio-aws-lexruntime", file("generated") / "lexruntime").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "lexruntime" % awsVersion, awsLibraryId := "lexruntime", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val detective = Project("zio-aws-detective", file("generated") / "detective").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "detective" % awsVersion, awsLibraryId := "detective", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val health = Project("zio-aws-health", file("generated") / "health").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "health" % awsVersion, awsLibraryId := "health", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val waf = Project("zio-aws-waf", file("generated") / "waf").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "waf" % awsVersion, awsLibraryId := "waf:waf", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val marketplacemetering = Project("zio-aws-marketplacemetering", file("generated") / "marketplacemetering").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "marketplacemetering" % awsVersion, awsLibraryId := "marketplacemetering", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val iotanalytics = Project("zio-aws-iotanalytics", file("generated") / "iotanalytics").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "iotanalytics" % awsVersion, awsLibraryId := "iotanalytics", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val dax = Project("zio-aws-dax", file("generated") / "dax").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "dax" % awsVersion, awsLibraryId := "dax", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val iotevents = Project("zio-aws-iotevents", file("generated") / "iotevents").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "iotevents" % awsVersion, awsLibraryId := "iotevents", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val gamelift = Project("zio-aws-gamelift", file("generated") / "gamelift").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "gamelift" % awsVersion, awsLibraryId := "gamelift", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val iotjobsdataplane = Project("zio-aws-iotjobsdataplane", file("generated") / "iotjobsdataplane").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "iotjobsdataplane" % awsVersion, awsLibraryId := "iotjobsdataplane", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val elasticinference = Project("zio-aws-elasticinference", file("generated") / "elasticinference").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "elasticinference" % awsVersion, awsLibraryId := "elasticinference", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val eventbridge = Project("zio-aws-eventbridge", file("generated") / "eventbridge").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "eventbridge" % awsVersion, awsLibraryId := "eventbridge", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val sfn = Project("zio-aws-sfn", file("generated") / "sfn").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "sfn" % awsVersion, awsLibraryId := "sfn", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val pricing = Project("zio-aws-pricing", file("generated") / "pricing").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "pricing" % awsVersion, awsLibraryId := "pricing", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val marketplaceentitlement = Project("zio-aws-marketplaceentitlement", file("generated") / "marketplaceentitlement").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "marketplaceentitlement" % awsVersion, awsLibraryId := "marketplaceentitlement", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val redshift = Project("zio-aws-redshift", file("generated") / "redshift").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "redshift" % awsVersion, awsLibraryId := "redshift", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val codepipeline = Project("zio-aws-codepipeline", file("generated") / "codepipeline").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "codepipeline" % awsVersion, awsLibraryId := "codepipeline", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val costandusagereport = Project("zio-aws-costandusagereport", file("generated") / "costandusagereport").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "costandusagereport" % awsVersion, awsLibraryId := "costandusagereport", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val macie = Project("zio-aws-macie", file("generated") / "macie").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "macie" % awsVersion, awsLibraryId := "macie", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val kinesisvideoarchivedmedia = Project("zio-aws-kinesisvideoarchivedmedia", file("generated") / "kinesisvideoarchivedmedia").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "kinesisvideoarchivedmedia" % awsVersion, awsLibraryId := "kinesisvideoarchivedmedia", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val shield = Project("zio-aws-shield", file("generated") / "shield").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "shield" % awsVersion, awsLibraryId := "shield", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val schemas = Project("zio-aws-schemas", file("generated") / "schemas").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "schemas" % awsVersion, awsLibraryId := "schemas", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val ec2instanceconnect = Project("zio-aws-ec2instanceconnect", file("generated") / "ec2instanceconnect").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "ec2instanceconnect" % awsVersion, awsLibraryId := "ec2instanceconnect", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val secretsmanager = Project("zio-aws-secretsmanager", file("generated") / "secretsmanager").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "secretsmanager" % awsVersion, awsLibraryId := "secretsmanager", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val pinpoint = Project("zio-aws-pinpoint", file("generated") / "pinpoint").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "pinpoint" % awsVersion, awsLibraryId := "pinpoint", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val route53resolver = Project("zio-aws-route53resolver", file("generated") / "route53resolver").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "route53resolver" % awsVersion, awsLibraryId := "route53resolver", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val synthetics = Project("zio-aws-synthetics", file("generated") / "synthetics").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "synthetics" % awsVersion, awsLibraryId := "synthetics", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val dlm = Project("zio-aws-dlm", file("generated") / "dlm").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "dlm" % awsVersion, awsLibraryId := "dlm", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val ssm = Project("zio-aws-ssm", file("generated") / "ssm").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "ssm" % awsVersion, awsLibraryId := "ssm", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val elastictranscoder = Project("zio-aws-elastictranscoder", file("generated") / "elastictranscoder").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "elastictranscoder" % awsVersion, awsLibraryId := "elastictranscoder", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val honeycode = Project("zio-aws-honeycode", file("generated") / "honeycode").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "honeycode" % awsVersion, awsLibraryId := "honeycode", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val alexaforbusiness = Project("zio-aws-alexaforbusiness", file("generated") / "alexaforbusiness").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "alexaforbusiness" % awsVersion, awsLibraryId := "alexaforbusiness", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val fms = Project("zio-aws-fms", file("generated") / "fms").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "fms" % awsVersion, awsLibraryId := "fms", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val directconnect = Project("zio-aws-directconnect", file("generated") / "directconnect").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "directconnect" % awsVersion, awsLibraryId := "directconnect", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val datapipeline = Project("zio-aws-datapipeline", file("generated") / "datapipeline").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "datapipeline" % awsVersion, awsLibraryId := "datapipeline", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val storagegateway = Project("zio-aws-storagegateway", file("generated") / "storagegateway").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "storagegateway" % awsVersion, awsLibraryId := "storagegateway", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val networkmanager = Project("zio-aws-networkmanager", file("generated") / "networkmanager").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "networkmanager" % awsVersion, awsLibraryId := "networkmanager", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val migrationhubconfig = Project("zio-aws-migrationhubconfig", file("generated") / "migrationhubconfig").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "migrationhubconfig" % awsVersion, awsLibraryId := "migrationhubconfig", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val route53domains = Project("zio-aws-route53domains", file("generated") / "route53domains").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "route53domains" % awsVersion, awsLibraryId := "route53domains", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val fsx = Project("zio-aws-fsx", file("generated") / "fsx").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "fsx" % awsVersion, awsLibraryId := "fsx", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val pi = Project("zio-aws-pi", file("generated") / "pi").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "pi" % awsVersion, awsLibraryId := "pi", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val kinesisvideo = Project("zio-aws-kinesisvideo", file("generated") / "kinesisvideo").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "kinesisvideo" % awsVersion, awsLibraryId := "kinesisvideo", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val kinesisanalyticsv2 = Project("zio-aws-kinesisanalyticsv2", file("generated") / "kinesisanalyticsv2").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "kinesisanalyticsv2" % awsVersion, awsLibraryId := "kinesisanalyticsv2", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val worklink = Project("zio-aws-worklink", file("generated") / "worklink").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "worklink" % awsVersion, awsLibraryId := "worklink", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val lambda = Project("zio-aws-lambda", file("generated") / "lambda").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "lambda" % awsVersion, awsLibraryId := "lambda", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val elasticsearch = Project("zio-aws-elasticsearch", file("generated") / "elasticsearch").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "elasticsearch" % awsVersion, awsLibraryId := "elasticsearch", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val chime = Project("zio-aws-chime", file("generated") / "chime").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "chime" % awsVersion, awsLibraryId := "chime", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val batch = Project("zio-aws-batch", file("generated") / "batch").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "batch" % awsVersion, awsLibraryId := "batch", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val connect = Project("zio-aws-connect", file("generated") / "connect").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "connect" % awsVersion, awsLibraryId := "connect", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val iotsitewise = Project("zio-aws-iotsitewise", file("generated") / "iotsitewise").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "iotsitewise" % awsVersion, awsLibraryId := "iotsitewise", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val kms = Project("zio-aws-kms", file("generated") / "kms").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "kms" % awsVersion, awsLibraryId := "kms", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val pinpointsmsvoice = Project("zio-aws-pinpointsmsvoice", file("generated") / "pinpointsmsvoice").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "pinpointsmsvoice" % awsVersion, awsLibraryId := "pinpointsmsvoice", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val opsworks = Project("zio-aws-opsworks", file("generated") / "opsworks").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "opsworks" % awsVersion, awsLibraryId := "opsworks", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val transcribe = Project("zio-aws-transcribe", file("generated") / "transcribe").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "transcribe" % awsVersion, awsLibraryId := "transcribe", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val kinesisanalytics = Project("zio-aws-kinesisanalytics", file("generated") / "kinesisanalytics").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "kinesisanalytics" % awsVersion, awsLibraryId := "kinesisanalytics", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val swf = Project("zio-aws-swf", file("generated") / "swf").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "swf" % awsVersion, awsLibraryId := "swf", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val eks = Project("zio-aws-eks", file("generated") / "eks").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "eks" % awsVersion, awsLibraryId := "eks", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val cloudformation = Project("zio-aws-cloudformation", file("generated") / "cloudformation").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "cloudformation" % awsVersion, awsLibraryId := "cloudformation", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val cognitoidentityprovider = Project("zio-aws-cognitoidentityprovider", file("generated") / "cognitoidentityprovider").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "cognitoidentityprovider" % awsVersion, awsLibraryId := "cognitoidentityprovider", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val serverlessapplicationrepository = Project("zio-aws-serverlessapplicationrepository", file("generated") / "serverlessapplicationrepository").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "serverlessapplicationrepository" % awsVersion, awsLibraryId := "serverlessapplicationrepository", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val s3control = Project("zio-aws-s3control", file("generated") / "s3control").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "s3control" % awsVersion, awsLibraryId := "s3control", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val comprehend = Project("zio-aws-comprehend", file("generated") / "comprehend").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "comprehend" % awsVersion, awsLibraryId := "comprehend", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val applicationdiscovery = Project("zio-aws-applicationdiscovery", file("generated") / "applicationdiscovery").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "applicationdiscovery" % awsVersion, awsLibraryId := "applicationdiscovery", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val cloudsearch = Project("zio-aws-cloudsearch", file("generated") / "cloudsearch").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "cloudsearch" % awsVersion, awsLibraryId := "cloudsearch", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val outposts = Project("zio-aws-outposts", file("generated") / "outposts").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "outposts" % awsVersion, awsLibraryId := "outposts", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val opsworkscm = Project("zio-aws-opsworkscm", file("generated") / "opsworkscm").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "opsworkscm" % awsVersion, awsLibraryId := "opsworkscm", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val sms = Project("zio-aws-sms", file("generated") / "sms").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "sms" % awsVersion, awsLibraryId := "sms", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val codebuild = Project("zio-aws-codebuild", file("generated") / "codebuild").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "codebuild" % awsVersion, awsLibraryId := "codebuild", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val cloud9 = Project("zio-aws-cloud9", file("generated") / "cloud9").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "cloud9" % awsVersion, awsLibraryId := "cloud9", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val marketplacecatalog = Project("zio-aws-marketplacecatalog", file("generated") / "marketplacecatalog").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "marketplacecatalog" % awsVersion, awsLibraryId := "marketplacecatalog", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val codestarconnections = Project("zio-aws-codestarconnections", file("generated") / "codestarconnections").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "codestarconnections" % awsVersion, awsLibraryId := "codestarconnections", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val medialive = Project("zio-aws-medialive", file("generated") / "medialive").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "medialive" % awsVersion, awsLibraryId := "medialive", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val servicediscovery = Project("zio-aws-servicediscovery", file("generated") / "servicediscovery").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "servicediscovery" % awsVersion, awsLibraryId := "servicediscovery", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val comprehendmedical = Project("zio-aws-comprehendmedical", file("generated") / "comprehendmedical").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "comprehendmedical" % awsVersion, awsLibraryId := "comprehendmedical", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val budgets = Project("zio-aws-budgets", file("generated") / "budgets").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "budgets" % awsVersion, awsLibraryId := "budgets", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val mediastoredata = Project("zio-aws-mediastoredata", file("generated") / "mediastoredata").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "mediastoredata" % awsVersion, awsLibraryId := "mediastoredata", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val identitystore = Project("zio-aws-identitystore", file("generated") / "identitystore").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "identitystore" % awsVersion, awsLibraryId := "identitystore", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val applicationautoscaling = Project("zio-aws-applicationautoscaling", file("generated") / "applicationautoscaling").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "applicationautoscaling" % awsVersion, awsLibraryId := "applicationautoscaling", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val ecs = Project("zio-aws-ecs", file("generated") / "ecs").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "ecs" % awsVersion, awsLibraryId := "ecs", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val mediapackage = Project("zio-aws-mediapackage", file("generated") / "mediapackage").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "mediapackage" % awsVersion, awsLibraryId := "mediapackage", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val pinpointemail = Project("zio-aws-pinpointemail", file("generated") / "pinpointemail").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "pinpointemail" % awsVersion, awsLibraryId := "pinpointemail", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val iot = Project("zio-aws-iot", file("generated") / "iot").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "iot" % awsVersion, awsLibraryId := "iot", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val mobile = Project("zio-aws-mobile", file("generated") / "mobile").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "mobile" % awsVersion, awsLibraryId := "mobile", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val ses = Project("zio-aws-ses", file("generated") / "ses").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "ses" % awsVersion, awsLibraryId := "ses", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val ivs = Project("zio-aws-ivs", file("generated") / "ivs").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "ivs" % awsVersion, awsLibraryId := "ivs", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val globalaccelerator = Project("zio-aws-globalaccelerator", file("generated") / "globalaccelerator").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "globalaccelerator" % awsVersion, awsLibraryId := "globalaccelerator", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val iotdataplane = Project("zio-aws-iotdataplane", file("generated") / "iotdataplane").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "iotdataplane" % awsVersion, awsLibraryId := "iotdataplane", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val personalize = Project("zio-aws-personalize", file("generated") / "personalize").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "personalize" % awsVersion, awsLibraryId := "personalize", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val dynamodbstreams = Project("zio-aws-dynamodbstreams", file("generated") / "dynamodbstreams").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "dynamodb" % awsVersion, awsLibraryId := "dynamodb:dynamodbstreams", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core, dynamodb)
  lazy val appconfig = Project("zio-aws-appconfig", file("generated") / "appconfig").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "appconfig" % awsVersion, awsLibraryId := "appconfig", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val transfer = Project("zio-aws-transfer", file("generated") / "transfer").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "transfer" % awsVersion, awsLibraryId := "transfer", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val apigatewaymanagementapi = Project("zio-aws-apigatewaymanagementapi", file("generated") / "apigatewaymanagementapi").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "apigatewaymanagementapi" % awsVersion, awsLibraryId := "apigatewaymanagementapi", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val sagemakerruntime = Project("zio-aws-sagemakerruntime", file("generated") / "sagemakerruntime").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "sagemakerruntime" % awsVersion, awsLibraryId := "sagemakerruntime", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val computeoptimizer = Project("zio-aws-computeoptimizer", file("generated") / "computeoptimizer").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "computeoptimizer" % awsVersion, awsLibraryId := "computeoptimizer", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val securityhub = Project("zio-aws-securityhub", file("generated") / "securityhub").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "securityhub" % awsVersion, awsLibraryId := "securityhub", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val personalizeevents = Project("zio-aws-personalizeevents", file("generated") / "personalizeevents").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "personalizeevents" % awsVersion, awsLibraryId := "personalizeevents", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val rekognition = Project("zio-aws-rekognition", file("generated") / "rekognition").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "rekognition" % awsVersion, awsLibraryId := "rekognition", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val managedblockchain = Project("zio-aws-managedblockchain", file("generated") / "managedblockchain").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "managedblockchain" % awsVersion, awsLibraryId := "managedblockchain", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val cloudhsmv2 = Project("zio-aws-cloudhsmv2", file("generated") / "cloudhsmv2").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "cloudhsmv2" % awsVersion, awsLibraryId := "cloudhsmv2", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val macie2 = Project("zio-aws-macie2", file("generated") / "macie2").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "macie2" % awsVersion, awsLibraryId := "macie2", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val iot1clickprojects = Project("zio-aws-iot1clickprojects", file("generated") / "iot1clickprojects").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "iot1clickprojects" % awsVersion, awsLibraryId := "iot1clickprojects", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val mediaconnect = Project("zio-aws-mediaconnect", file("generated") / "mediaconnect").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "mediaconnect" % awsVersion, awsLibraryId := "mediaconnect", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val devicefarm = Project("zio-aws-devicefarm", file("generated") / "devicefarm").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "devicefarm" % awsVersion, awsLibraryId := "devicefarm", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val wafv2 = Project("zio-aws-wafv2", file("generated") / "wafv2").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "wafv2" % awsVersion, awsLibraryId := "wafv2", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val migrationhub = Project("zio-aws-migrationhub", file("generated") / "migrationhub").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "migrationhub" % awsVersion, awsLibraryId := "migrationhub", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val lakeformation = Project("zio-aws-lakeformation", file("generated") / "lakeformation").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "lakeformation" % awsVersion, awsLibraryId := "lakeformation", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val cognitosync = Project("zio-aws-cognitosync", file("generated") / "cognitosync").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "cognitosync" % awsVersion, awsLibraryId := "cognitosync", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val iam = Project("zio-aws-iam", file("generated") / "iam").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "iam" % awsVersion, awsLibraryId := "iam", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val imagebuilder = Project("zio-aws-imagebuilder", file("generated") / "imagebuilder").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "imagebuilder" % awsVersion, awsLibraryId := "imagebuilder", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val mediapackagevod = Project("zio-aws-mediapackagevod", file("generated") / "mediapackagevod").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "mediapackagevod" % awsVersion, awsLibraryId := "mediapackagevod", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val frauddetector = Project("zio-aws-frauddetector", file("generated") / "frauddetector").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "frauddetector" % awsVersion, awsLibraryId := "frauddetector", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val marketplacecommerceanalytics = Project("zio-aws-marketplacecommerceanalytics", file("generated") / "marketplacecommerceanalytics").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "marketplacecommerceanalytics" % awsVersion, awsLibraryId := "marketplacecommerceanalytics", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val config = Project("zio-aws-config", file("generated") / "config").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "config" % awsVersion, awsLibraryId := "config", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val mediastore = Project("zio-aws-mediastore", file("generated") / "mediastore").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "mediastore" % awsVersion, awsLibraryId := "mediastore", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val workdocs = Project("zio-aws-workdocs", file("generated") / "workdocs").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "workdocs" % awsVersion, awsLibraryId := "workdocs", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val codecommit = Project("zio-aws-codecommit", file("generated") / "codecommit").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "codecommit" % awsVersion, awsLibraryId := "codecommit", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val elasticache = Project("zio-aws-elasticache", file("generated") / "elasticache").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "elasticache" % awsVersion, awsLibraryId := "elasticache", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val servicequotas = Project("zio-aws-servicequotas", file("generated") / "servicequotas").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "servicequotas" % awsVersion, awsLibraryId := "servicequotas", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val appmesh = Project("zio-aws-appmesh", file("generated") / "appmesh").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "appmesh" % awsVersion, awsLibraryId := "appmesh", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val kinesis = Project("zio-aws-kinesis", file("generated") / "kinesis").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "kinesis" % awsVersion, awsLibraryId := "kinesis", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val groundstation = Project("zio-aws-groundstation", file("generated") / "groundstation").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "groundstation" % awsVersion, awsLibraryId := "groundstation", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val ecr = Project("zio-aws-ecr", file("generated") / "ecr").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "ecr" % awsVersion, awsLibraryId := "ecr", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val organizations = Project("zio-aws-organizations", file("generated") / "organizations").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "organizations" % awsVersion, awsLibraryId := "organizations", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val savingsplans = Project("zio-aws-savingsplans", file("generated") / "savingsplans").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "savingsplans" % awsVersion, awsLibraryId := "savingsplans", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
  lazy val sesv2 = Project("zio-aws-sesv2", file("generated") / "sesv2").settings(commonSettings).settings(libraryDependencies += "software.amazon.awssdk" % "sesv2" % awsVersion, awsLibraryId := "sesv2", Compile / sourceGenerators += generateSources.taskValue).dependsOn(core)
